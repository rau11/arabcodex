//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CodexMinning.Core.Entities
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class CodexMinningEntities : DbContext
    {
        public CodexMinningEntities()
            : base("name=CodexMinningEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<LookupParameter> LookupParameters { get; set; }
        public virtual DbSet<Role> Roles { get; set; }
        public virtual DbSet<UserRole> UserRoles { get; set; }
        public virtual DbSet<ErrorLog> ErrorLogs { get; set; }
        public virtual DbSet<Vw_GetRoles> Vw_GetRoles { get; set; }
        public virtual DbSet<Download> Downloads { get; set; }
        public virtual DbSet<LookupMaster> LookupMasters { get; set; }
        public virtual DbSet<Vw_GetLookupParameter> Vw_GetLookupParameter { get; set; }
        public virtual DbSet<Vw_GetCountries> Vw_GetCountries { get; set; }
        public virtual DbSet<Vw_GetUsers> Vw_GetUsers { get; set; }
        public virtual DbSet<User> Users { get; set; }
        public virtual DbSet<Vw_Get_SA_Results> Vw_Get_SA_Results { get; set; }
        public virtual DbSet<MinningTable> MinningTables { get; set; }
        public virtual DbSet<Vw_GetMinnigTable> Vw_GetMinnigTable { get; set; }
        public virtual DbSet<Setting> Settings { get; set; }
    
        public virtual ObjectResult<Sp_AddUpdateLookupParameter_Result> Sp_AddUpdateLookupParameter(Nullable<int> id, string type, string lookupKey, string lookupValue, Nullable<bool> isActive)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var lookupKeyParameter = lookupKey != null ?
                new ObjectParameter("LookupKey", lookupKey) :
                new ObjectParameter("LookupKey", typeof(string));
    
            var lookupValueParameter = lookupValue != null ?
                new ObjectParameter("LookupValue", lookupValue) :
                new ObjectParameter("LookupValue", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_AddUpdateLookupParameter_Result>("Sp_AddUpdateLookupParameter", idParameter, typeParameter, lookupKeyParameter, lookupValueParameter, isActiveParameter);
        }
    
        public virtual ObjectResult<Sp_AddUpdateRoles_Result> Sp_AddUpdateRoles(Nullable<int> id, string name, Nullable<bool> isActive)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_AddUpdateRoles_Result>("Sp_AddUpdateRoles", idParameter, nameParameter, isActiveParameter);
        }
    
        public virtual ObjectResult<Sp_AddUpdateUserRoles_Result> Sp_AddUpdateUserRoles(Nullable<int> userId, Nullable<int> roleId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var roleIdParameter = roleId.HasValue ?
                new ObjectParameter("RoleId", roleId) :
                new ObjectParameter("RoleId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_AddUpdateUserRoles_Result>("Sp_AddUpdateUserRoles", userIdParameter, roleIdParameter);
        }
    
        public virtual ObjectResult<SP_GetUserRoles_Result> SP_GetUserRoles(Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetUserRoles_Result>("SP_GetUserRoles", userIdParameter);
        }
    
        public virtual ObjectResult<SP_CheckUserRoles_Result> SP_CheckUserRoles(Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_CheckUserRoles_Result>("SP_CheckUserRoles", userIdParameter);
        }
    
        public virtual ObjectResult<Sp_AddUpdateUser_Result> Sp_AddUpdateUser(Nullable<int> id, string userName, string password, string fullName, string email, string phone, Nullable<bool> isActive, Nullable<int> createdBy, Nullable<int> countryId, string organization, Nullable<bool> isUserRegistration)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var fullNameParameter = fullName != null ?
                new ObjectParameter("FullName", fullName) :
                new ObjectParameter("FullName", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("Phone", phone) :
                new ObjectParameter("Phone", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var countryIdParameter = countryId.HasValue ?
                new ObjectParameter("CountryId", countryId) :
                new ObjectParameter("CountryId", typeof(int));
    
            var organizationParameter = organization != null ?
                new ObjectParameter("Organization", organization) :
                new ObjectParameter("Organization", typeof(string));
    
            var isUserRegistrationParameter = isUserRegistration.HasValue ?
                new ObjectParameter("IsUserRegistration", isUserRegistration) :
                new ObjectParameter("IsUserRegistration", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_AddUpdateUser_Result>("Sp_AddUpdateUser", idParameter, userNameParameter, passwordParameter, fullNameParameter, emailParameter, phoneParameter, isActiveParameter, createdByParameter, countryIdParameter, organizationParameter, isUserRegistrationParameter);
        }
    
        public virtual ObjectResult<SP_ValidateUser_Result> SP_ValidateUser(string userName, string password)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_ValidateUser_Result>("SP_ValidateUser", userNameParameter, passwordParameter);
        }
    
        public virtual ObjectResult<string> SP_GetAnalyticsDetails()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("SP_GetAnalyticsDetails");
        }
    
        public virtual int Sp_AddUpdateMinning()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_AddUpdateMinning");
        }
    
        public virtual ObjectResult<SP_GetMininngData_Result> SP_GetMininngData(Nullable<int> pageNumber, Nullable<int> pageSize, string orderBy, string searchYear)
        {
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var orderByParameter = orderBy != null ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(string));
    
            var searchYearParameter = searchYear != null ?
                new ObjectParameter("SearchYear", searchYear) :
                new ObjectParameter("SearchYear", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetMininngData_Result>("SP_GetMininngData", pageNumberParameter, pageSizeParameter, orderByParameter, searchYearParameter);
        }
    
        public virtual ObjectResult<Sp_AddUpdateCodexMinning_Result> Sp_AddUpdateCodexMinning(Nullable<int> id, string year, string country, string foodCategory, string contaminant, string foodGroup, string foodIdentifier, string foodCode, string foodOrigin, string foodName, string foodAnalyzed, string studyObjective, string samplingPlan, string analyticalTechnique, string qualityAssurance, string lOD, string lODUnit, string lOQ, string lOQUnit, Nullable<decimal> recovery, string concentration, string concentrationRangeMax, string average, string median, string unit, string rSD, string samplesBelow, string individualSampleAverageResults, string referece, Nullable<bool> isActive, Nullable<int> createdBy)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var yearParameter = year != null ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(string));
    
            var countryParameter = country != null ?
                new ObjectParameter("Country", country) :
                new ObjectParameter("Country", typeof(string));
    
            var foodCategoryParameter = foodCategory != null ?
                new ObjectParameter("FoodCategory", foodCategory) :
                new ObjectParameter("FoodCategory", typeof(string));
    
            var contaminantParameter = contaminant != null ?
                new ObjectParameter("Contaminant", contaminant) :
                new ObjectParameter("Contaminant", typeof(string));
    
            var foodGroupParameter = foodGroup != null ?
                new ObjectParameter("FoodGroup", foodGroup) :
                new ObjectParameter("FoodGroup", typeof(string));
    
            var foodIdentifierParameter = foodIdentifier != null ?
                new ObjectParameter("FoodIdentifier", foodIdentifier) :
                new ObjectParameter("FoodIdentifier", typeof(string));
    
            var foodCodeParameter = foodCode != null ?
                new ObjectParameter("FoodCode", foodCode) :
                new ObjectParameter("FoodCode", typeof(string));
    
            var foodOriginParameter = foodOrigin != null ?
                new ObjectParameter("FoodOrigin", foodOrigin) :
                new ObjectParameter("FoodOrigin", typeof(string));
    
            var foodNameParameter = foodName != null ?
                new ObjectParameter("FoodName", foodName) :
                new ObjectParameter("FoodName", typeof(string));
    
            var foodAnalyzedParameter = foodAnalyzed != null ?
                new ObjectParameter("FoodAnalyzed", foodAnalyzed) :
                new ObjectParameter("FoodAnalyzed", typeof(string));
    
            var studyObjectiveParameter = studyObjective != null ?
                new ObjectParameter("StudyObjective", studyObjective) :
                new ObjectParameter("StudyObjective", typeof(string));
    
            var samplingPlanParameter = samplingPlan != null ?
                new ObjectParameter("SamplingPlan", samplingPlan) :
                new ObjectParameter("SamplingPlan", typeof(string));
    
            var analyticalTechniqueParameter = analyticalTechnique != null ?
                new ObjectParameter("AnalyticalTechnique", analyticalTechnique) :
                new ObjectParameter("AnalyticalTechnique", typeof(string));
    
            var qualityAssuranceParameter = qualityAssurance != null ?
                new ObjectParameter("QualityAssurance", qualityAssurance) :
                new ObjectParameter("QualityAssurance", typeof(string));
    
            var lODParameter = lOD != null ?
                new ObjectParameter("LOD", lOD) :
                new ObjectParameter("LOD", typeof(string));
    
            var lODUnitParameter = lODUnit != null ?
                new ObjectParameter("LODUnit", lODUnit) :
                new ObjectParameter("LODUnit", typeof(string));
    
            var lOQParameter = lOQ != null ?
                new ObjectParameter("LOQ", lOQ) :
                new ObjectParameter("LOQ", typeof(string));
    
            var lOQUnitParameter = lOQUnit != null ?
                new ObjectParameter("LOQUnit", lOQUnit) :
                new ObjectParameter("LOQUnit", typeof(string));
    
            var recoveryParameter = recovery.HasValue ?
                new ObjectParameter("Recovery", recovery) :
                new ObjectParameter("Recovery", typeof(decimal));
    
            var concentrationParameter = concentration != null ?
                new ObjectParameter("Concentration", concentration) :
                new ObjectParameter("Concentration", typeof(string));
    
            var concentrationRangeMaxParameter = concentrationRangeMax != null ?
                new ObjectParameter("ConcentrationRangeMax", concentrationRangeMax) :
                new ObjectParameter("ConcentrationRangeMax", typeof(string));
    
            var averageParameter = average != null ?
                new ObjectParameter("Average", average) :
                new ObjectParameter("Average", typeof(string));
    
            var medianParameter = median != null ?
                new ObjectParameter("Median", median) :
                new ObjectParameter("Median", typeof(string));
    
            var unitParameter = unit != null ?
                new ObjectParameter("Unit", unit) :
                new ObjectParameter("Unit", typeof(string));
    
            var rSDParameter = rSD != null ?
                new ObjectParameter("RSD", rSD) :
                new ObjectParameter("RSD", typeof(string));
    
            var samplesBelowParameter = samplesBelow != null ?
                new ObjectParameter("SamplesBelow", samplesBelow) :
                new ObjectParameter("SamplesBelow", typeof(string));
    
            var individualSampleAverageResultsParameter = individualSampleAverageResults != null ?
                new ObjectParameter("IndividualSampleAverageResults", individualSampleAverageResults) :
                new ObjectParameter("IndividualSampleAverageResults", typeof(string));
    
            var refereceParameter = referece != null ?
                new ObjectParameter("Referece", referece) :
                new ObjectParameter("Referece", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_AddUpdateCodexMinning_Result>("Sp_AddUpdateCodexMinning", idParameter, yearParameter, countryParameter, foodCategoryParameter, contaminantParameter, foodGroupParameter, foodIdentifierParameter, foodCodeParameter, foodOriginParameter, foodNameParameter, foodAnalyzedParameter, studyObjectiveParameter, samplingPlanParameter, analyticalTechniqueParameter, qualityAssuranceParameter, lODParameter, lODUnitParameter, lOQParameter, lOQUnitParameter, recoveryParameter, concentrationParameter, concentrationRangeMaxParameter, averageParameter, medianParameter, unitParameter, rSDParameter, samplesBelowParameter, individualSampleAverageResultsParameter, refereceParameter, isActiveParameter, createdByParameter);
        }
    
        public virtual ObjectResult<SP_GetMininngDataNew_Result> SP_GetMininngDataNew(Nullable<int> pageNumber, Nullable<int> pageSize, string year, string foodCategory, string country, string contaminant, string foodGroup, string foodIdentifier, string foodCode, string foodOrigin, string foodName, string foodAnalyzed, string studyObjective, string samplingPlan, string analyticalTechnique, string qualityAssurance, string lOD, string lODUnit, string lOQ, string lOQUnit, string recovery, string concentration, string concentrationRangeMax, string average, string median, string unit, string rSD, string samplesBelow, string individualSampleAverageResults, string referece, string orderBy, string searchYear)
        {
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var yearParameter = year != null ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(string));
    
            var foodCategoryParameter = foodCategory != null ?
                new ObjectParameter("FoodCategory", foodCategory) :
                new ObjectParameter("FoodCategory", typeof(string));
    
            var countryParameter = country != null ?
                new ObjectParameter("Country", country) :
                new ObjectParameter("Country", typeof(string));
    
            var contaminantParameter = contaminant != null ?
                new ObjectParameter("Contaminant", contaminant) :
                new ObjectParameter("Contaminant", typeof(string));
    
            var foodGroupParameter = foodGroup != null ?
                new ObjectParameter("FoodGroup", foodGroup) :
                new ObjectParameter("FoodGroup", typeof(string));
    
            var foodIdentifierParameter = foodIdentifier != null ?
                new ObjectParameter("FoodIdentifier", foodIdentifier) :
                new ObjectParameter("FoodIdentifier", typeof(string));
    
            var foodCodeParameter = foodCode != null ?
                new ObjectParameter("FoodCode", foodCode) :
                new ObjectParameter("FoodCode", typeof(string));
    
            var foodOriginParameter = foodOrigin != null ?
                new ObjectParameter("FoodOrigin", foodOrigin) :
                new ObjectParameter("FoodOrigin", typeof(string));
    
            var foodNameParameter = foodName != null ?
                new ObjectParameter("FoodName", foodName) :
                new ObjectParameter("FoodName", typeof(string));
    
            var foodAnalyzedParameter = foodAnalyzed != null ?
                new ObjectParameter("FoodAnalyzed", foodAnalyzed) :
                new ObjectParameter("FoodAnalyzed", typeof(string));
    
            var studyObjectiveParameter = studyObjective != null ?
                new ObjectParameter("StudyObjective", studyObjective) :
                new ObjectParameter("StudyObjective", typeof(string));
    
            var samplingPlanParameter = samplingPlan != null ?
                new ObjectParameter("SamplingPlan", samplingPlan) :
                new ObjectParameter("SamplingPlan", typeof(string));
    
            var analyticalTechniqueParameter = analyticalTechnique != null ?
                new ObjectParameter("AnalyticalTechnique", analyticalTechnique) :
                new ObjectParameter("AnalyticalTechnique", typeof(string));
    
            var qualityAssuranceParameter = qualityAssurance != null ?
                new ObjectParameter("QualityAssurance", qualityAssurance) :
                new ObjectParameter("QualityAssurance", typeof(string));
    
            var lODParameter = lOD != null ?
                new ObjectParameter("LOD", lOD) :
                new ObjectParameter("LOD", typeof(string));
    
            var lODUnitParameter = lODUnit != null ?
                new ObjectParameter("LODUnit", lODUnit) :
                new ObjectParameter("LODUnit", typeof(string));
    
            var lOQParameter = lOQ != null ?
                new ObjectParameter("LOQ", lOQ) :
                new ObjectParameter("LOQ", typeof(string));
    
            var lOQUnitParameter = lOQUnit != null ?
                new ObjectParameter("LOQUnit", lOQUnit) :
                new ObjectParameter("LOQUnit", typeof(string));
    
            var recoveryParameter = recovery != null ?
                new ObjectParameter("Recovery", recovery) :
                new ObjectParameter("Recovery", typeof(string));
    
            var concentrationParameter = concentration != null ?
                new ObjectParameter("Concentration", concentration) :
                new ObjectParameter("Concentration", typeof(string));
    
            var concentrationRangeMaxParameter = concentrationRangeMax != null ?
                new ObjectParameter("ConcentrationRangeMax", concentrationRangeMax) :
                new ObjectParameter("ConcentrationRangeMax", typeof(string));
    
            var averageParameter = average != null ?
                new ObjectParameter("Average", average) :
                new ObjectParameter("Average", typeof(string));
    
            var medianParameter = median != null ?
                new ObjectParameter("Median", median) :
                new ObjectParameter("Median", typeof(string));
    
            var unitParameter = unit != null ?
                new ObjectParameter("Unit", unit) :
                new ObjectParameter("Unit", typeof(string));
    
            var rSDParameter = rSD != null ?
                new ObjectParameter("RSD", rSD) :
                new ObjectParameter("RSD", typeof(string));
    
            var samplesBelowParameter = samplesBelow != null ?
                new ObjectParameter("SamplesBelow", samplesBelow) :
                new ObjectParameter("SamplesBelow", typeof(string));
    
            var individualSampleAverageResultsParameter = individualSampleAverageResults != null ?
                new ObjectParameter("IndividualSampleAverageResults", individualSampleAverageResults) :
                new ObjectParameter("IndividualSampleAverageResults", typeof(string));
    
            var refereceParameter = referece != null ?
                new ObjectParameter("Referece", referece) :
                new ObjectParameter("Referece", typeof(string));
    
            var orderByParameter = orderBy != null ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(string));
    
            var searchYearParameter = searchYear != null ?
                new ObjectParameter("SearchYear", searchYear) :
                new ObjectParameter("SearchYear", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetMininngDataNew_Result>("SP_GetMininngDataNew", pageNumberParameter, pageSizeParameter, yearParameter, foodCategoryParameter, countryParameter, contaminantParameter, foodGroupParameter, foodIdentifierParameter, foodCodeParameter, foodOriginParameter, foodNameParameter, foodAnalyzedParameter, studyObjectiveParameter, samplingPlanParameter, analyticalTechniqueParameter, qualityAssuranceParameter, lODParameter, lODUnitParameter, lOQParameter, lOQUnitParameter, recoveryParameter, concentrationParameter, concentrationRangeMaxParameter, averageParameter, medianParameter, unitParameter, rSDParameter, samplesBelowParameter, individualSampleAverageResultsParameter, refereceParameter, orderByParameter, searchYearParameter);
        }
    
        public virtual ObjectResult<SP_ExportMininngData_Result> SP_ExportMininngData()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_ExportMininngData_Result>("SP_ExportMininngData");
        }
    }
}
